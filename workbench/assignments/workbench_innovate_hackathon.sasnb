[{"kind":1,"language":"markdown","value":"### SAS® Viya® Workbench - Innovate 2025 Hackathon Bootcamp \n#### Step 1\nSelect the SAS Kernel\n\nThis example has been adapted from [title](link) .\n\n#### Data Preparation\n##### About the data set\n\nlorem ipsum","outputs":[]},{"kind":2,"language":"sas","value":"/******************************************************************************\n\n EXAMPLE:     data_step.sas\n DATA:        bonus\n DESCRIPTION: This is a simple data set that contains bonuses for\n              different position titles at a hypothetical company.\n PURPOSE:     In this example, we will demonstrate a few different ways of\n              using the SAS® Data Step to read and process data.\n\n ******************************************************************************/\n\ntitle 'Examples of using SAS Data Step';\n\n/******************************************************************************\n\n Read an external file\n\n In most of the other SAS examples in SAS® Viya® Workbench, we show how to use the\n IMPORT procedure to import data from external file sources such as CSV files.\n In the example below, we show how to use the data step to create a SAS data\n set from a CSV file.\n\n ******************************************************************************/\n\ndata bonus;\n    infile \"&WORKSPACE_PATH./sas-viya-workbench-examples/data/bonus.csv\" dsd firstobs=2;\n    length title $24;\n    input title $ jobcode bonus;\nrun;\n\n\n/******************************************************************************\n\n A few points about the example above:\n\n - The INFILE statement allows users to specify an external file source.\n - The DSD option (delimiter-sensitive data) reads the delimited CSV file.\n - The file contains a header row with data starting in the second row.\n - As a result, we add option FIRSTOBS=2 to skip the header row.\n - Since \"title\" is a character variable, we need to specify the length to avoid\n   truncation issues due to the default length being determined by the value in\n   the first observation.\n\n ******************************************************************************/\n\ntitle2 'Bonus data from bonus.csv';\nproc print data=bonus;\nrun;\n\n\n/******************************************************************************\n\n Instead of creating data from an external file, we can also use the data step\n to create data directly. We will use the DATALINES statement to show how to\n create a data set containing the first name of 5 employees and their jobcode.\n\n ******************************************************************************/\n\ndata employees;\n    input name :$8. jobcode;\ndatalines;\nArthur 3\nBob    1\nCarol  5\nDavid  3\nEdison 7\n;\n\n\ntitle2 'Employees data created by DATALINES';\nproc print data=employees;\nrun;\n\n\n/******************************************************************************\n\n Assuming the EMPLOYEES and the BONUS data sets are both from the same\n company, we can combine the information of the two data sets into a single\n data set.\n\n We will use variable \"jobcode\" as our key to match the two data sets because\n \"jobcode\" is the only common variable in two data sets.\n\n ******************************************************************************/\n\n/******************************************************************************\n\n Before matching data, both data sets need to be sorted by the key variable.\n\n ******************************************************************************/\n\nproc sort data=bonus;\n    by jobcode;\nrun;\nproc sort data=employees;\n    by jobcode;\nrun;\n\n\n/******************************************************************************\n\n We now merge the two data by matching the \"jobcode\" variable. The EMPLOYEES\n data set does not include all job codes found in BONUS. If we do not want\n records in the combined data with missing values for employees, we can\n use the IN= data set option to include only the records with employees present\n in the EMPLOYEES data set.\n\n ******************************************************************************/\n\ndata employees_bonus;\n    merge employees(in=in_employees) bonus;\n    by jobcode;\n    if in_employees;\nrun;\n\ntitle2 'Merged data from employees and bonus';\nproc print data=employees_bonus;\nrun;\n\n\n/******************************************************************************\n\n We can also use another tool, the SQL procedure, to create the same merged\n data by using left join operation.\n\n ******************************************************************************/\n\nproc sql;\n    create table employees_bonus2 as\n    select employees.*, bonus from employees as emp left join bonus as bon\n    on emp.jobcode = bon.jobcode;\nquit;\n\ntitle2 'Merged data from employees and bonus by PROC SQL';\nproc print data=employees_bonus2;\nrun;\n\n\n/******************************************************************************\n\n Now, if we do not want to display the exact bonus of each employee but\n instead display the range of bonus, we can define a custom format and apply\n the format to variable \"bonus\".\n\n ******************************************************************************/\n\nproc format;\n    value bonus\n    low - <3000   = \"Lower than 3,000\"\n    3000 - <5000 = \"Between 3,000 and 5,000\"\n    5000 - high   = \"Over 5,000\"\n    ;\nrun;\n\ndata employees_bonus;\n    set employees_bonus;\n    format bonus bonus.;\nrun;\n\ntitle2 'Merged data with formatted bonus';\nproc print data=employees_bonus;\nrun;\n\n\n/******************************************************************************\n\n So far, we have shown how to read an external file into the data step and\n how to input data directly into Data Step via the DATALINES statement. In\n the example below, we will show how to create data programmatically through\n the DO LOOP in the data step.\n\n ******************************************************************************/\n\ndata circle;\n    do theta = 0 to 6.28 by 0.01;\n        x = cos(theta);\n        y = sin(theta);\n        output;\n    end;\nrun;\n\n\n/******************************************************************************\n\n We can use the SGPLOT procedure to visualize the data created in this Data Step.\n\n ******************************************************************************/\n\ntitle2 'Use DO-LOOP to create circle data';\nproc sgplot data=circle;\n    series x=x y=y;\nrun;\n\ntitle;","outputs":[]}]